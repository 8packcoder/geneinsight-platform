#!/usr/bin/env node

/**
 * üöÄ GeneInsight Platform Setup Script
 * 
 * This script helps new contributors set up the development environment
 * quickly and easily.
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß¨ Welcome to GeneInsight Platform Setup!');
console.log('=====================================\n');

// Check Node.js version
function checkNodeVersion() {
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  console.log(`üìã Checking Node.js version: ${nodeVersion}`);
  
  if (majorVersion < 18) {
    console.error('‚ùå Node.js 18+ is required. Please upgrade Node.js.');
    console.log('   Download from: https://nodejs.org/');
    process.exit(1);
  }
  
  console.log('‚úÖ Node.js version is compatible\n');
}

// Check if Git is installed
function checkGit() {
  try {
    execSync('git --version', { stdio: 'ignore' });
    console.log('‚úÖ Git is installed\n');
  } catch (error) {
    console.error('‚ùå Git is not installed. Please install Git.');
    console.log('   Download from: https://git-scm.com/');
    process.exit(1);
  }
}

// Install dependencies
function installDependencies() {
  console.log('üì¶ Installing dependencies...');
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Dependencies installed successfully\n');
  } catch (error) {
    console.error('‚ùå Failed to install dependencies');
    console.error('   Try running: npm cache clean --force');
    console.error('   Then run: npm install');
    process.exit(1);
  }
}

// Create environment file
function createEnvFile() {
  const envPath = '.env.local';
  
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ Environment file already exists\n');
    return;
  }
  
  console.log('üîß Creating environment file...');
  
  const envContent = `# GeneInsight Platform Environment Variables
# Generated by setup script

# JWT Secret for authentication
JWT_SECRET=geneInsightSecretKeyForJWTTokenGeneration2024

# API URL (for development)
NEXT_PUBLIC_API_URL=http://localhost:3000

# Development mode
NODE_ENV=development

# Optional: Add your own variables below
# DATABASE_URL=your_database_url
# EMAIL_API_KEY=your_email_api_key
`;

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ Environment file created\n');
}

// Check if development server can start
function testDevServer() {
  console.log('üß™ Testing development server...');
  
  try {
    // Start dev server in background and test if it responds
    const { spawn } = require('child_process');
    const devServer = spawn('npm', ['run', 'dev'], { 
      stdio: 'pipe',
      detached: false 
    });
    
    let serverStarted = false;
    
    devServer.stdout.on('data', (data) => {
      const output = data.toString();
      if (output.includes('Ready') || output.includes('localhost:3000')) {
        serverStarted = true;
        devServer.kill();
        console.log('‚úÖ Development server test passed\n');
      }
    });
    
    // Timeout after 30 seconds
    setTimeout(() => {
      if (!serverStarted) {
        devServer.kill();
        console.log('‚ö†Ô∏è  Development server test timed out (this is usually okay)\n');
      }
    }, 30000);
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not test development server (this is usually okay)\n');
  }
}

// Display next steps
function displayNextSteps() {
  console.log('üéâ Setup Complete!');
  console.log('==================\n');
  
  console.log('üöÄ Next Steps:');
  console.log('1. Start the development server:');
  console.log('   npm run dev\n');
  
  console.log('2. Open your browser and visit:');
  console.log('   http://localhost:3000\n');
  
  console.log('3. Start contributing:');
  console.log('   - Read CONTRIBUTING.md for guidelines');
  console.log('   - Check DEVELOPMENT.md for detailed setup');
  console.log('   - Look for "good first issue" labels on GitHub\n');
  
  console.log('4. Useful commands:');
  console.log('   npm run dev      - Start development server');
  console.log('   npm run build    - Build for production');
  console.log('   npm run lint     - Check code style');
  console.log('   npm run type-check - Check TypeScript\n');
  
  console.log('üìö Resources:');
  console.log('   - Contributing Guide: CONTRIBUTING.md');
  console.log('   - Development Guide: DEVELOPMENT.md');
  console.log('   - Project Roadmap: ROADMAP.md');
  console.log('   - GitHub Issues: https://github.com/8packcoder/geneinsight-platform/issues\n');
  
  console.log('‚ùì Need Help?');
  console.log('   - Create an issue on GitHub');
  console.log('   - Check existing documentation');
  console.log('   - Look at code comments for guidance\n');
  
  console.log('Happy coding! üß¨‚ú®');
}

// Main setup function
async function main() {
  try {
    checkNodeVersion();
    checkGit();
    installDependencies();
    createEnvFile();
    displayNextSteps();
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

// Run setup
main();
